[Display]
ScreenWidth   = 400
ScreenHeight  = 300
Title         = Text and Shaders Tutorial

[Viewport]
Camera            = Camera
BackgroundColor   = (100,127,127)

[Camera]
FrustumWidth  = @Display.ScreenWidth
FrustumHeight = @Display.ScreenHeight
FrustumFar    = 2.0
FrustumNear   = 0.0
Position      = (0.0, 0.0, -1.0)

[TextObject]
Graphic = TextGraphic
ShaderList = TextShader
Color = (255,255,255)

[TextGraphic]
Text          = TextWithCustomFont
Pivot         = center

[TextWithCustomFont]
String = HELLO WORLD!!
Font = plump

[TextShader]
ParamList = texture # BorderColor # LightPos # LightColor; We've added a new parameter
Code = "
void main() {
    // Get the texture value for the current pixel
    vec4 tex = texture2D(texture, gl_TexCoord[0].xy);

    // Here's the fun; We blend in the border color based on R channel
    gl_FragColor.rgb = mix(vec3(1.0), BorderColor, tex.r) * gl_Color.rgb;

    // Let's derive the surface normal from the green and blue channels
    vec3 normal = normalize(vec3(tex.g-0.5, tex.b-0.5, 0.5));

    // Let's find the unit vector pointing from this pixel towards the light
    vec3 light_dir = normalize(LightPos-gl_FragCoord.xyz);

    // The illumination of a Lambertian surface is the dot product
    // of the surface normal and the unit vector towards the light
    float illumination = max(0.0, dot(normal, light_dir));

    // Let's apply the light color and the illumination
    gl_FragColor.rgb *= LightColor * illumination;

    // Set the pixel alpha to the texture's alpha multiplied by the object's
    gl_FragColor.a = tex.a * gl_Color.a;
}"
BorderColor = (0,0,255) ; Let's make the border blue, just for fun.
LightPos = (200,150,100) ;
LightColor = (1,0.7,0.7) ;

@plump.ini@
